{"version":3,"sources":["components/square/square.component.jsx","patterns.js","components/board/board.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Square","value","clickHandler","style","onClick","className","Patterns","Board","useState","Array","fill","board","setBoard","player","setPlayer","winner","state","result","setResult","useEffect","checkWin","checkIfTie","alert","restartGame","square","map","index","forEach","currentPattern","firstPlayer","foundWinningPattern","filled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAceA,MAVf,YAA0C,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,aACfC,EAAQF,EAAK,iBAAaA,GAAb,SACnB,OAEI,qBAAKG,QAASF,EAAcG,UAAWF,EAAvC,SACKF,KCTAK,EAAW,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,ICiFIC,MApFf,WACI,MAA0BC,mBAASC,MAAM,GAAGC,KAAK,KAAjD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BJ,mBAAS,KAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA4BN,mBAAS,CAAEO,OAAQ,OAAQC,MAAO,SAA9D,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACNC,IACAC,IACgBP,EAAN,KAAVD,EAA0B,IAAiB,OAC5C,CAACF,IAEJQ,qBAAU,WACc,QAAhBF,EAAOD,OACPM,MAAM,0JAAD,OAAmCL,EAAOF,SAGnDQ,MAED,CAACN,IAEJ,IAAMf,EAAe,SAACsB,GAClBZ,EAASD,EAAMc,KAAI,SAACxB,EAAOyB,GACvB,OAAIA,GAASF,GAAmB,IAATvB,EACZY,EAEJZ,OAITmB,EAAW,WACbd,EAASqB,SAAQ,SAACC,GACd,IAAMC,EAAclB,EAAMiB,EAAe,IACzC,GAAmB,IAAfC,EAAJ,CACA,IAAIC,GAAsB,EAC1BF,EAAeD,SAAQ,SAACD,GAChBf,EAAMe,IAAUG,IAChBC,GAAsB,MAG1BA,GACAZ,EAAU,CAAEH,OAAQF,EAAQG,MAAO,8CAKzCK,EAAa,WACf,IAAIU,GAAS,EACbpB,EAAMgB,SAAQ,SAACH,GACG,IAAVA,IACAO,GAAS,MAIbA,GACAb,EAAU,CAAEH,OAAQ,iCAASC,MAAO,oCAItCO,EAAc,WAChBX,EAASH,MAAM,GAAGC,KAAK,KACvBI,EAAU,MAGd,OACI,sBAAKT,UAAU,QAAf,UACI,sBAAKA,UAAU,MAAf,UACI,cAAC,EAAD,CAAQJ,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,MAC5D,cAAC,EAAD,CAAQD,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,MAC5D,cAAC,EAAD,CAAQD,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,SAEhE,sBAAKG,UAAU,MAAf,UACI,cAAC,EAAD,CAAQJ,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,MAC5D,cAAC,EAAD,CAAQD,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,MAC5D,cAAC,EAAD,CAAQD,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,SAEhE,sBAAKG,UAAU,MAAf,UACI,cAAC,EAAD,CAAQJ,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,MAC5D,cAAC,EAAD,CAAQD,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,MAC5D,cAAC,EAAD,CAAQD,MAAOU,EAAM,GAAIT,aAAc,WAAQA,EAAa,aCxE7D8B,MARf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b898f140.chunk.js","sourcesContent":["import React from 'react'\r\nimport './square.styles.scss'\r\n\r\n\r\nfunction Square({ value, clickHandler,}) {\r\n    const style = value ? `square ${value}` : `square`\r\n    return (\r\n\r\n        <div onClick={clickHandler} className={style}>\r\n            {value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Square","export const Patterns = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n]","import React, { useState, useEffect } from 'react'\r\nimport './board.styles.scss'\r\nimport Square from '../square/square.component'\r\nimport { Patterns } from '../../patterns'\r\n\r\nfunction Board() {\r\n    const [board, setBoard] = useState(Array(9).fill(''))\r\n    const [player, setPlayer] = useState('X')\r\n    const [result, setResult] = useState({ winner: 'none', state: 'none' })\r\n\r\n    useEffect(() => {\r\n        checkWin()\r\n        checkIfTie()\r\n        player == 'O' ? setPlayer('X') : setPlayer('O')\r\n    }, [board])\r\n\r\n    useEffect(() => {\r\n        if (result.state != 'none') {\r\n            alert(`Игра окончена ! Победил игрок :${result.winner}`)\r\n        }\r\n\r\n        restartGame()\r\n\r\n    }, [result])\r\n\r\n    const clickHandler = (square) => {\r\n        setBoard(board.map((value, index) => {\r\n            if (index == square && value == '') {\r\n                return player\r\n            }\r\n            return value\r\n        }))\r\n    }\r\n\r\n    const checkWin = () => {\r\n        Patterns.forEach((currentPattern) => {\r\n            const firstPlayer = board[currentPattern[0]]\r\n            if (firstPlayer == '') return\r\n            let foundWinningPattern = true\r\n            currentPattern.forEach((index) => {\r\n                if (board[index] != firstPlayer) {\r\n                    foundWinningPattern = false\r\n                }\r\n            })\r\n            if (foundWinningPattern) {\r\n                setResult({ winner: player, state: 'Победа' })\r\n            }\r\n        })\r\n    }\r\n\r\n    const checkIfTie = () => {\r\n        let filled = true\r\n        board.forEach((square) => {\r\n            if (square == \"\") {\r\n                filled = false\r\n            }\r\n        })\r\n\r\n        if (filled) {\r\n            setResult({ winner: 'Ничья', state: 'Ничья' })\r\n        }\r\n    }\r\n\r\n    const restartGame = () => {\r\n        setBoard(Array(9).fill(''))\r\n        setPlayer('O')\r\n    }\r\n\r\n    return (\r\n        <div className='board'>\r\n            <div className='row'>\r\n                <Square value={board[0]} clickHandler={() => { clickHandler(0) }} />\r\n                <Square value={board[1]} clickHandler={() => { clickHandler(1) }} />\r\n                <Square value={board[2]} clickHandler={() => { clickHandler(2) }} />\r\n            </div>\r\n            <div className='row'>\r\n                <Square value={board[3]} clickHandler={() => { clickHandler(3) }} />\r\n                <Square value={board[4]} clickHandler={() => { clickHandler(4) }} />\r\n                <Square value={board[5]} clickHandler={() => { clickHandler(5) }} />\r\n            </div>\r\n            <div className='row'>\r\n                <Square value={board[6]} clickHandler={() => { clickHandler(6) }} />\r\n                <Square value={board[7]} clickHandler={() => { clickHandler(7) }} />\r\n                <Square value={board[8]} clickHandler={() => { clickHandler(8) }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board","import './App.css';\nimport Board from './components/board/board.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}